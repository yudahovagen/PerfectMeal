{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\JavaScript\\\\perfect-meal\\\\client\\\\src\\\\context\\\\Food\\\\FoodState.js\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport FoodContext from \"./foodContext\";\nimport FoodReducer from \"./foodReducer\";\n\nconst FoodState = props => {\n  const initialState = {\n    macro: []\n  };\n  const [state, dispatch] = useReducer(FoodReducer, initialState); //search food\n\n  const searchfood = async text => {\n    const res = await axios.get(`https://api.nal.usda.gov/fdc/v1/foods/search?api_key=IckhwEjFyp6BaAC0oonKEpKjTbBjgG8b5EqBggnm&query=${text}`); //function to get only the needed items from the food nutrients    \n\n    if (!res.data.foods[0]) {\n      //if we didnt find the food\n      dispatch({\n        type: \"NOT_FOUND\",\n        payload: {}\n      });\n    } else {\n      //picking the first food element from the food array to avoid \n      const tmp = res.data.foods[0].foodNutrients;\n      const result = {\n        id: Math.floor(Math.random() * 100),\n        name: text,\n        Protien: tmp.filter(m => m.nutrientId === 1003)[0].value,\n        Fat: tmp.filter(m => m.nutrientId === 1004)[0].value,\n        Carbohydrate: tmp.filter(m => m.nutrientId === 1005)[0].value,\n        Calories: tmp.filter(m => m.nutrientId === 1008)[0].value\n      };\n      dispatch({\n        type: \"SEARCH_FOOD\",\n        payload: result\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FoodContext.Provider, {\n    value: {\n      macro: state.macro,\n      searchfood\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, props.children));\n};\n\nexport default FoodState;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/JavaScript/perfect-meal/client/src/context/Food/FoodState.js"],"names":["React","useReducer","axios","FoodContext","FoodReducer","FoodState","props","initialState","macro","state","dispatch","searchfood","text","res","get","data","foods","type","payload","tmp","foodNutrients","result","id","Math","floor","random","name","Protien","filter","m","nutrientId","value","Fat","Carbohydrate","Calories","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAE;AADY,GAArB;AAGA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACG,WAAD,EAAcG,YAAd,CAApC,CAJ2B,CAK3B;;AACA,QAAMI,UAAU,GAAG,MAAOC,IAAP,IAAgB;AACjC,UAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CACf,uGAAsGF,IAAK,EAD5F,CAAlB,CADiC,CAIjC;;AACA,QAAI,CAACC,GAAG,CAACE,IAAJ,CAASC,KAAT,CAAe,CAAf,CAAL,EAAwB;AACtB;AACAN,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,WADC;AAEPC,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID,KAND,MAMO;AACL;AACA,YAAMC,GAAG,GAAGN,GAAG,CAACE,IAAJ,CAASC,KAAT,CAAe,CAAf,EAAkBI,aAA9B;AACA,YAAMC,MAAM,GAAG;AACbC,QAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CADS;AAEbC,QAAAA,IAAI,EAAEd,IAFO;AAGbe,QAAAA,OAAO,EAAER,GAAG,CAACS,MAAJ,CAAYC,CAAD,IAAOA,CAAC,CAACC,UAAF,KAAiB,IAAnC,EAAyC,CAAzC,EAA4CC,KAHxC;AAIbC,QAAAA,GAAG,EAAEb,GAAG,CAACS,MAAJ,CAAYC,CAAD,IAAOA,CAAC,CAACC,UAAF,KAAiB,IAAnC,EAAyC,CAAzC,EAA4CC,KAJpC;AAKbE,QAAAA,YAAY,EAAEd,GAAG,CAACS,MAAJ,CAAYC,CAAD,IAAOA,CAAC,CAACC,UAAF,KAAiB,IAAnC,EAAyC,CAAzC,EAA4CC,KAL7C;AAMbG,QAAAA,QAAQ,EAAEf,GAAG,CAACS,MAAJ,CAAYC,CAAD,IAAOA,CAAC,CAACC,UAAF,KAAiB,IAAnC,EAAyC,CAAzC,EAA4CC;AANzC,OAAf;AAQArB,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,aADC;AAEPC,QAAAA,OAAO,EAAEG;AAFF,OAAD,CAAR;AAID;AACF,GA3BD;;AA6BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLb,MAAAA,KAAK,EAAEC,KAAK,CAACD,KADR;AAELG,MAAAA;AAFK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGL,KAAK,CAAC6B,QALT,CADF,CADF;AAWD,CA9CD;;AAgDA,eAAe9B,SAAf","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport FoodContext from \"./foodContext\";\r\nimport FoodReducer from \"./foodReducer\";\r\n\r\nconst FoodState = (props) => {\r\n  const initialState = {\r\n    macro: [],\r\n  };\r\n  const [state, dispatch] = useReducer(FoodReducer, initialState);\r\n  //search food\r\n  const searchfood = async (text) => {\r\n    const res = await axios.get(\r\n      `https://api.nal.usda.gov/fdc/v1/foods/search?api_key=IckhwEjFyp6BaAC0oonKEpKjTbBjgG8b5EqBggnm&query=${text}`\r\n    );\r\n    //function to get only the needed items from the food nutrients    \r\n    if (!res.data.foods[0]) {\r\n      //if we didnt find the food\r\n      dispatch({\r\n        type: \"NOT_FOUND\",\r\n        payload: {},\r\n      });\r\n    } else {\r\n      //picking the first food element from the food array to avoid \r\n      const tmp = res.data.foods[0].foodNutrients;\r\n      const result = {\r\n        id: Math.floor(Math.random() * 100),\r\n        name: text,\r\n        Protien: tmp.filter((m) => m.nutrientId === 1003)[0].value,\r\n        Fat: tmp.filter((m) => m.nutrientId === 1004)[0].value,\r\n        Carbohydrate: tmp.filter((m) => m.nutrientId === 1005)[0].value,\r\n        Calories: tmp.filter((m) => m.nutrientId === 1008)[0].value,\r\n      };\r\n      dispatch({\r\n        type: \"SEARCH_FOOD\",\r\n        payload: result,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FoodContext.Provider\r\n        value={{\r\n          macro: state.macro,\r\n          searchfood,\r\n        }}>\r\n        {props.children}\r\n      </FoodContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FoodState;\r\n"]},"metadata":{},"sourceType":"module"}